@page "/Loans/Add"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject LoginService LoginService

<!DOCTYPE html>
<html>
<head>
    <style>
        p {color: red;}
    </style>
</head>
<body>
    @if (LoginService.Logado == true)
    {
        <form>
            @if (msgBookIndisponible == true)
            {
                <p>Livro indisponível</p>
            }
            @if (nullCheck == true)
            {
                <p>Preencha todos os campos</p>
            }
            <label for="BookId">ID do Livro: </label>
            <input type="number" @bind="bookId" id="BookId" name="BookId"> <br>

            <label for="Student">Estudante: </label>
            <input type="text" @bind="student" id="Student" name="Student"> <br>

            <label for="LoanDate">Data de emprestimo: </label>
            <input type="text" @bind="loanDate" id="LoanDate" name="LoanDate"> <br>

            <label for="ReturnDate">Data de devolução: </label>
            <input type="text" @bind="returnDate" id="ReturnDate" name="ReturnDate"> <br>

            <button type="button" @onclick="Save">Salvar</button>
            <button type="button" @onclick="Voltar">Voltar</button>
        </form>   
    }
    else{Navigation.NavigateTo("/Login");}
</body>
</html>

@code
{
    [Parameter]
    public int id { get; set; }

    private int bookId;
    private string student;
    private string loanDate;
    private string returnDate;
    private bool msgBookIndisponible = false;

    public Loan newLoan = new Loan();

    public async void Save()
    {
        NullCheck();
        if (nullCheck == false)
        {
            BookSituationCheck();

            if (msgBookIndisponible == false)
            {
                newLoan.BookId = bookId;
                newLoan.Student = student;
                newLoan.LoanDate = loanDate;
                newLoan.ReturnDate = returnDate;

                await Http.PostAsJsonAsync<Loan>("loan", newLoan);
                BookSituationUpdate();
                Navigation.NavigateTo("/Loans");
            }
        }
    }

    public void Voltar()
    {
        Navigation.NavigateTo("/Loans");
    }

    public Book newUpdate = new Book();

    public List<Book>? books { get; set; } = new List<Book>();
    
    public void BookSituationCheck()
    {
        foreach (var item in books)
        {
            if (bookId == item.Id)
            {
                if (item.Situation == "Indisponível")
                {
                    msgBookIndisponible = true;
                }
                else
                {
                    msgBookIndisponible = false;
                }
            }
        }
    }
    
    private bool nullCheck = false;

    public void NullCheck()
    {
        if (student != null)
        {
            if (loanDate != null)
            {
                if (returnDate !=null)
                {
                    nullCheck = false;
                }

                else {nullCheck = true;}
            }

            else {nullCheck = true;}
        }

        else {nullCheck = true;}
    }

    public void BookSituationUpdate()
    {
        foreach (var item in books)
        {
            if (bookId == item.Id)
            {
                id = item.Id;
                newUpdate.ISBN = item.ISBN;
                newUpdate.Title = item.Title;
                newUpdate.Genre = item.Genre;
                newUpdate.Author = item.Author;
                newUpdate.Publisher = item.Publisher;
                newUpdate.Section = item.Section;
                newUpdate.Situation = "Indisponível";

                Http.PutAsJsonAsync<Book>($"book/{id}", newUpdate);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        books = await Http.GetFromJsonAsync<List<Book>?>("book");
    }

    public class Loan
    {
        public int Id { get; set; }
        public int BookId { get; set; }
        public string Student { get; set; }
        public string LoanDate { get; set; }
        public string ReturnDate { get; set; }
    }

    public class Book
    {
        public int Id { get; set; }
        public string ISBN { get; set; }
        public string Title { get; set; }
        public string Genre { get; set; }
        public string Author { get; set; }
        public string Publisher { get; set; }
        public string Section { get; set; }
        public string Situation { get; set; }
    }
}